[project]
name = "api-server"
version = "0.1.0"
description = "FastAPI server with PostgreSQL and SQLModel"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "email-validator>=2.3.0",
    "fastapi>=0.116.1",
    "httpx>=0.28.1",
    "psycopg2-binary>=2.9.10",
    "pydantic-settings>=2.10.1",
    "python-jose[cryptography]>=3.5.0",
    "python-multipart>=0.0.20",
    "sqlmodel>=0.0.24",
]

[project.scripts]
api-server = "api_server.main:app"

[build-system]
requires = ["uv_build>=0.8.15,<0.9.0"]
build-backend = "uv_build"

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (commented-out code)
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
]
ignore = [
    "S101",  # Use of assert detected (allow in tests)
    "PLR0913", # Too many arguments to function call
    "TRY003", # Avoid specifying long messages outside the exception class
    "B008",  # Do not perform function calls in argument defaults (FastAPI dependency injection)
    "S105",  # Possible hardcoded password (false positives in tests and config)
    "S106",  # Possible hardcoded password (false positives in tests and config)
    "N805",  # First argument of a method should be named `self` (Pydantic validators use `cls`)
    "N815",  # Variable in class scope should not be mixedCase (LINE API uses camelCase)
    "N818",  # Exception name should be named with an Error suffix (APIException is fine)
    "TRY301", # Abstract `raise` to an inner function (acceptable for simple error handling)
    "TRY300", # Consider moving statement to `else` block (acceptable pattern)
    "TRY400", # Use `logging.exception` instead of `logging.error` (sometimes we want error)
    "B904",  # Within `except` clause, raise exceptions with `raise ... from err` (acceptable)
    "PLR2004", # Magic value used in comparison (acceptable for HTTP status codes and constants)
    "ARG001", # Unused function argument (acceptable for FastAPI dependencies and interfaces)
    "RET504", # Unnecessary assignment before return (acceptable for clarity)
    "PLC0415", # import should be at top-level (acceptable for avoiding circular imports)
    "E402",  # Module level import not at top of file (acceptable for avoiding circular imports)
    "TC001", # Move application import into type-checking block (acceptable for runtime use)
    "UP038", # Use X | Y instead of (X, Y) in isinstance (acceptable for readability)
    "SIM102", # Use single if statement (acceptable for readability)
    "PERF403", # Use dict comprehension (acceptable for readability)
    "E501",  # Line too long (acceptable for descriptive strings and complex expressions)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "PLR2004", # Magic value used in comparison (common in tests)
    "ARG002",  # Unused method argument (common in test fixtures)
    "F841",    # Local variable assigned but never used (common in tests)
    "PT011",   # pytest.raises() is too broad (acceptable in tests)
    "RET504",  # Unnecessary assignment before return (acceptable in test fixtures)
    "PT003",   # scope='function' is implied in @pytest.fixture() (explicit is better)
    "PLC0415", # import should be at top-level (acceptable in test fixtures)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_return_any = false
strict_equality = false
show_error_codes = true
warn_unreachable = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_subclassing_any = false
warn_unused_configs = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "psycopg2.*",
    "jose.*",
    "pydantic.*",
    "sqlmodel.*",
    "fastapi.*",
    "starlette.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pre-commit>=4.0.1",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=7.0.0",
    "ruff>=0.12.12",
    "uvicorn>=0.35.0",
]
